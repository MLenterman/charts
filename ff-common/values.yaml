## @section Common parameters
##

## @param nameOverride String to partially override common.names.fullname template (will maintain the release name)
##
nameOverride: ''
## @param fullnameOverride String to fully override common.names.fullname template
##
fullnameOverride: ''

## @section Frank!Framework image parameters
##

## Frank!Framework image
## ref: https://https://nexus.frankframework.org/#browse/browse:frankframework-docker:v2%2Ffrank-framework%2Ftags/
## @param image.registry Frank!Framework image registry
## @param image.repository Frank!Framework image repository
## @param image.tag Frank!Framework image tag (immutable tags are recommended)
##
image:
  registry: nexus.frankframework.org
  repository: frank-framework
  tag: 7.8
  ## @param image.pullPolicy Frank!Framework image pull policy
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## @param image.pullSecrets Frank!Framework image pull secrets
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - myRegistryKeySecretName
  ##
  pullSecrets: [ ]

## @section Frank! Configuration parameters
##

## @skip frank [object]
##
frank:
  ## @param frank.memory Sets the initial and maximum size of the heap that will be used by the Frank!Framework
  ## ref: https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#BABDJJFI
  ##
  memory: 4G
  ## @skip frank.dtap [object]
  ## @param frank.dtap.stage Set the DTAP stage. Options: `LOC`, `DEV`, `TST`, `ACC`, `PRD`
  ## @param frank.dtap.side [string] Set the DTAP side of where the instance is running
  ##
  dtap:
    stage: TST
    side: ''
  ## @skip frank.credentials [object,nullable]
  ##
#  credentials: { }
  ## @skip frank.instance [string]
  ## @param frank.instance.name Set the name of the Frank! instance
  ##
  instance:
    name: ''
  ## @skip frank.configurations [object]
  ## @param frank.configurations.names [array] Set the configurations to load
  ## e.g.
  ## configurations.names:
  ##   - main
  configurations:
    names: [ ]
  ## @skip frank.security [object]
  ## @skip frank.security.http [object]
  ##
  security:
    http:
      ## @param frank.security.http.authentication Set http authentication for the Frank!
      authentication: true
      ## @param frank.security.http.localUsers [object] Set localUsers who can log in on the Frank!
      ## @param frank.security.http.localUsers.username [string] Set the username of the user
      ## @param frank.security.http.localUsers.password [string] Set the password of the user
      ## @param frank.security.http.localUsers.roles [array] Set the roles of the user. Options: `IbisTester`, `IbisDataAdmin`, `IbisAdmin`, `IbisWebService`, `IbisObserver`
      ## e.g.
      ## localUsers:
      ##   - username: Tester
      ##     password: ChangeMe!
      ##     roles:
      ##        - IbisTester
      ##
      localUsers: { }
      ## @skip frank.security.http.activeDirectory [object]
      ## @param frank.security.http.activeDirectory.enabled Enable Active Directory for authentication
      ## @param frank.security.http.activeDirectory.url Set url for Active Directory
      ## @param frank.security.http.activeDirectory.baseDn Set baseDn for Active Directory users
      ## @skip frank.security.http.activeDirectory.roleMapping [object]
      ## @param frank.security.http.activeDirectory.roleMapping.tester Map the rol for Tester
      ## @param frank.security.http.activeDirectory.roleMapping.dataAdmin Map the rol for DataAdmin
      ## @param frank.security.http.activeDirectory.roleMapping.admin Map the rol for Admin
      ## @param frank.security.http.activeDirectory.roleMapping.webService Map the rol for WebService
      ## @param frank.security.http.activeDirectory.roleMapping.observer Map the rol for Observer
      ##
      activeDirectory:
        enabled: false
        url: ''
        baseDn: ''
        roleMapping:
          tester: ''
          dataAdmin: ''
          admin: ''
          webService: ''
          observer: ''
  ## @param frank.environmentVariables [object] Set extra environment variables for the Frank!
  environmentVariables: { }

## @section Frank!Framework Connection parameters
##

## @skip connections
##
connections:
  ## @param connections.jdbc [nullable, object]
  ##
  jdbc:
  #    - name: ''
  #      type: ''
  #      host: ''
  #      port: ''
  #      database: ''
  #      username: ''
  #      password: ''
  #      ssl: ''
  ## @param connections.jms [nullable, object]
  ##
  jms:
#    - name: ''
#      type: ''
#      host: ''
#      port: ''

## @section Frank!Framework deployment parameters
##

## @param replicaCount Number of Frank!Framework replicas to deploy
## NOTE: ReadWriteMany PVC(s) are required if replicaCount > 1
##
replicaCount: 1

## Configure extra options for Frank!Framework containers' liveness, readiness and startup probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param livenessProbe.enabled Enable livenessProbe on Frank!Framework containers
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: true
  initialDelaySeconds: 40
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 6
  successThreshold: 1
## Frank!Framework container's resource requests and limits
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
## @param resources [object] Set the resources for the Frank!Framework containers
## @param resources.limits [string] The resources limits for the Frank!Framework containers
## @param resources.requests.memory [string] The requested memory for the Frank!Framework containers
## @param resources.requests.cpu [string] The requested cpu for the Frank!Framework containers
## e.g.:
## resources
##   limits:
##     cpu: 2000m
##     memory: 4200M
##   requests:
##     cpu: 2000m
##     memory: 4200M
##
resources: { }

## @skip autoscaling
##
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
## @param nodeSelector Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: { }
## @param tolerations Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: [ ]
## @param affinity Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## NOTE: podAffinityPreset, podAntiAffinityPreset, and nodeAffinityPreset will be ignored when it's set
##
affinity: { }
## @param timeZone used for database connection and log timestamps
##
timeZone: Etc/UTC

## @section Traffic Exposure Parameters
##

## Frank!Framework service parameters
##
service:
  ## @param service.type Frank!Framework service type
  ##
  type: ClusterIP
  ## @param service.port Frank!Framework service port
  port: 80
## Configure the ingress resource that allows you to access the Frank!Framework installation
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  ## @param ingress.enabled Enable ingress record generation for Frank!
  ##
  enabled: false
  ## @param ingress.className IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  className: ""
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   kubernetes.io/tls-acme: 'true'
  ##
  annotations: { }
  ## @param ingress.hosts [array] Set hosts for ingress
  ## @param ingress.hosts.host [string] Set hostname
  ## @param ingress.hosts.paths [array] Set multiple paths
  ## @param ingress.hosts.paths.path [string] Set path (context url)
  ## @param ingress.hosts.paths.pathType [string] Set type of path
  ##
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  ## @param ingress.tls [array] Define tls secrets for hosts (implementation not done yet)
  ## e.g.
  ## tls:
  ##   - secretName: chart-example-tls
  ##     hosts:
  ##       - chart-example.local
  ##
  tls: [ ]

## @section Other Parameters
##

## Frank!Framework Service Account
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  ## @param serviceAccount.create Enable creation of ServiceAccount for Frank!Framework pod
  ##
  create: true
  ## @param serviceAccount.annotations Additional custom annotations for the ServiceAccount
  ##
  annotations: { }
  ## @param serviceAccount.name The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the ff-common.fullname template
  ##
  name: ''
## @param podAnnotations Annotations for Frank!Framework pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: { }
## @param podLabels Extra labels for Frank!Framework pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: { }
## Configure Pods Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext [object] Set Frank!Framework pod's Security Context
## @param podSecurityContext.fsGroup [string] Set Frank!Framework pod's Security Context fsGroup
## @param podSecurityContext.seccompProfile.type [string] Set Frank!Framework container's Security Context seccomp profile
##
podSecurityContext: { }
## Configure Container Security Context (only main container)
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param securityContext [object] Set Frank!Framework container's Security Context
## @param securityContext.capabilities.drop [string] Set Frank!Framework container's Security Context runAsNonRoot
## @param securityContext.readOnlyRootFilesystem [string] Set Frank!Framework container's filesystem to read-only
## @param securityContext.allowPrivilegeEscalation [string] Set Frank!Framework container's privilege escalation
## @param securityContext.runAsUser [string] Set Frank!Framework container's Security Context runAsUser
## @param securityContext.runAsNonRoot [string] Set Frank!Framework container's Security Context runAsNonRoot
## e.g.
## securityContext: {}
##  capabilities:
##    drop:
##      - ALL
##  readOnlyRootFilesystem: true
##  runAsNonRoot: true
##  runAsUser: 1000
##
securityContext: { }
