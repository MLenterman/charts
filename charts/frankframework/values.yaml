## @section Common parameters
##

## @param nameOverride String to partially override fullname template (will maintain the release name)
##
nameOverride: ""
## @param fullnameOverride String to fully override fullname template
##
fullnameOverride: ""

## @section Frank!Framework image parameters
## @descriptionStart
## The image is pulled from nexus.frankframework.org by default. The images located there will be kept for as long as possible.
## Here are the images available:
## https://nexus.frankframework.org/#browse/browse:frankframework-docker:v2%2Ffrankframework%2Ftags/
## If you want to use a specific nightly, you can use the images on docker.io:
## https://hub.docker.com/r/frankframework/frankframework/tags
## @descriptionEnd
##

## Frank!Framework image
## @param image.registry Frank!Framework image registry
## @param image.repository Frank!Framework image repository
## @param image.tag Frank!Framework image tag (immutable tags are recommended)
##
image:
  registry: nexus.frankframework.org
  repository: frankframework
  tag: ""
  ## @param image.pullPolicy Frank!Framework image pull policy
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## @param image.pullSecrets Frank!Framework image pull secrets
  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## e.g:
  ## pullSecrets:
  ##   - name: myRegistryKeySecretName
  ##
  pullSecrets: []

## @section Frank!Framework application parameters
##

application:
  ## @param application.dtap.stage (Required) Set the `DTAP` stage. Options: `LOC`, `DEV`, `TST`, `ACC`, `PRD`
  ## @param application.dtap.side Set the `DTAP` side of where the instance is running
  ##
  dtap:
    stage: ""
    side: ""
  ## @param application.instance.name Set the name of the Frank! instance (default is the `fullname`)
  ##
  instance:
    name: ""
  ## @param application.configurations.names [array] Set the configurations to load. Leave empty to use the default
  ## e.g.
  ## configurations.names:
  ##   - main
  ##
  configurations:
    names: []
  ## @param application.properties [object] Set Yaml properties for configuring the Frank!Framework or configurations
  ## @extra application.properties ref: https://github.com/frankframework/frankframework/blob/master/core/src/main/resources/AppConstants.properties
  ## @extra application.properties implementation ref: https://github.com/frankframework/frankframework/blob/master/commons/src/main/java/org/frankframework/util/YamlParser.java
  ##
  properties: {}

## @section Environment variables
## @descriptionStart
## The environment variables are used to configure the Frank!Framework.
##
## To configure credentials you need to add a volume (see section Volumes) and set these environment variables.
##
## ```yaml
## credentialFactory.class: "nl.nn.credentialprovider.PropertyFileCredentialFactory"
## credentialFactory.map.properties: "path to credentials.properties"
## ```
##
## For more information about credentials, see the [documentation](https://frank-manual.readthedocs.io/en/latest/deploying/credentials.html).
##
## Refer to the [Frank!Framework Manual](https://frank-manual.readthedocs.io/) for more information.
##
## To fine tune memory refer to the [Oracle documentation](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html#BABDJJFI).
## @descriptionEnd

## @param environmentVariables [object, nullable] Set environment variables for the Frank!Framework
## @param environmentVariables.application.server.type.custom [string,nullable] Set the transaction manager, this is needed for transactionality support
## @param environmentVariables.JAVA_OPTS [string,nullable] Set the JAVA_OPTS for the Frank!Framework
## @param environmentVariables.application.security.http.authentication [string,nullable] Set the authentication for the Frank!Framework
##
environmentVariables:
  # Enable Narayana transaction manager
  application.server.type.custom: "NARAYANA"
  JAVA_OPTS: "-XX:MaxRAMPercentage=80.0"
  application.security.http.authentication: "false"

## @section Generate ConfigMaps and Secrets
## @descriptionStart
## To deploy the Frank!Framework, it can be needed to add some files to the container.
##
## The Frank!Framework chart allows you to generate configmaps and secrets from values.
##
## This is useful if you want to add local users or resources to the Frank!Framework.
##
## The following example will generate a resources.yaml file in the /opt/frank/secrets folder.
##
## ```yaml
## generateSecret:
##  - name: frankframework-resources
##    mountPath: /opt/frank/resources/resources.yml
##    subPath: resources.yml
##    stringData:
##      resources.yml: |-
##        jdbc:
##          - name: frank2example
##            type: org.h2.jdbcx.JdbcDataSource
##            url: jdbc:h2:mem:frank2example;NON_KEYWORDS=VALUE;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1;TRACE_LEVEL_FILE=0;
## @descriptionEnd
##

## @param generateConfigMap [array, nullable] Generate configmaps from values
## @param generateConfigMap.name [string, nullable] Name of the configmap
## @param generateConfigMap.optional [boolean, nullable] Mark the configmap as optional (default false)
## @param generateConfigMap.defaultMode [int, nullable] Default mode of the configmap (default 0644)
## @param generateConfigMap.items [array, nullable] Items of the configmap
## @param generateConfigMap.mountPath [string, nullable] Path where the configmap will be mounted (default /opt/frank/secrets)
## @param generateConfigMap.readOnly [boolean, nullable] ReadOnly of the configmap (default true)
## @param generateConfigMap.data [string, nullable] Data of the configmap
## e.g: generateConfigMap:
##  - name: DeploymentSpecifics
##    mountPath: /opt/frank/resources/DeploymentSpecifics.properties
##    subPath: DeploymentSpecifics.properties
##    stringData:
##      DeploymentSpecifics.properties: |-
##        jdbc.migrator=true
generateConfigMap: []

## @param generateSecret [array, nullable] Generate secrets from values
## @param generateSecret.name [string, nullable] Name of the secret
## @param generateSecret.type [string, nullable] Type of the secret (default Opaque)
## Options: `Opaque`, `kubernetes.io/dockerconfigjson`
## @param generateSecret.optional [boolean, nullable] Mark the secret as optional (default false)
## @ param generateSecret.defaultMode [int, nullable] Default mode of the secret (default 0644)
## @param generateSecret.items [array, nullable] Items of the secret
## @param generateSecret.mountPath [string, nullable] Path where the secret will be mounted (default /opt/frank/secrets)
## @param generateSecret.readOnly [boolean, nullable] ReadOnly of the secret (default true)
## @param generateSecret.data [string, nullable] Data of the secret
## @param generateSecret.stringData [string, nullable] StringData of the secret
## e.g: generateSecret:
##  - name: frankframework-resources
##    mountPath: /opt/frank/resources/resources.yml
##    subPath: resources.yml
##    stringData:
##      resources.yml: |-
##        jdbc:
##          - name: frank2example
##            type: org.h2.jdbcx.JdbcDataSource
##            url: jdbc:h2:mem:frank2example;NON_KEYWORDS=VALUE;DB_CLOSE_ON_EXIT=FALSE;DB_CLOSE_DELAY=-1;TRACE_LEVEL_FILE=0;
##
generateSecret: []

## @section Volumes
## @descriptionStart
## The Frank!Framework chart allows you to create and mount volumes to the Frank!Framework.
## This is useful if you want to add local users or resources to the Frank!Framework.
## @descriptionEnd
##

## @param extraVolumes Optionally specify extra list of additional volumes for WordPress pods
## ref: https://kubernetes.io/docs/concepts/storage/volumes/
##
extraVolumes: []

## @param extraVolumeMounts Optionally specify extra list of additional volumeMounts for WordPress container(s)
## ref: https://kubernetes.io/docs/concepts/storage/volumes/
##
extraVolumeMounts: []

## @section Sidecars
## @descriptionStart
## The Frank!Framework chart allows you to add additional sidecar containers to the Frank!Framework pod.
## This is useful if you want to add additional tools to the Frank!Framework.
## @descriptionEnd
##

## @param sidecars Add additional sidecar containers to the Frank!Framework pod
## e.g:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: []

## @param initContainers Add additional init containers to the Frank!Framework pod
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## e.g:
## initContainers:
##  - name: your-image-name
##    image: your-image
##    imagePullPolicy: Always
##    command: ['sh', '-c', 'download a driver jar and place it in /usr/local/tomcat/lib']
##
initContainers: []

## @section Frank!Framework console parameters
## @descriptionStart
## The console is a web application that allows you to manage the Frank!Framework.
## Each Frank!Framework instance contains a console, which can be accessed by going to the instance's URL and appending `/iaf/gui`.
## Enabling this additional console will allow you to manage multiple instances of Frank!Framework from a single console.
## It is disabled by default, but can be enabled by setting `console.enabled` to `true`.
## Configuring the console is done by setting the `console.application` parameters. Which can be found in the frank-console chart.
## ref: https://frankframework.github.io/charts/frank-console
## @descriptionEnd
##

## @param console.enabled Enable the Frank!Framework console
##
console:
  enabled: false

## @section Frank!Framework deployment parameters
## @descriptionStart
## The startup probe will enable blue-green deployment, which are great for uptime during upgrades and such.
## It (and the liveness probe) will check if the console is accessible, until a better health endpoint is available.
## The readiness probe will check if all adapters are running using the server health endpoint
## @descriptionEnd
##

## @param replicaCount Number of Frank!Framework replicas to deploy
## NOTE: ReadWriteMany PVC(s) are required if replicaCount > 1
##
replicaCount: 1

## Configure extra options for Frank!Framework containers' startup probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
## @param startupProbe.periodSeconds Period seconds for startupProbe
## @param startupProbe.timeoutSeconds Timeout seconds for startupProbe
## @param startupProbe.failureThreshold Failure threshold for startupProbe
## @param startupProbe.successThreshold Success threshold for startupProbe
## @param startupProbe.httpGet.path Path for startupProbe
## @param startupProbe.httpGet.port Port for startupProbe
##
startupProbe:
  initialDelaySeconds: 40
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 12
  successThreshold: 1
  httpGet:
    path: /iaf/api/server/health
    port: 8080

## Configure extra options for Frank!Framework containers' liveness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
## @param livenessProbe.httpGet.path Path for livenessProbe
## @param livenessProbe.httpGet.port Port for livenessProbe
##
livenessProbe:
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 12
  successThreshold: 1
  httpGet:
    path: /iaf/api/server/health
    port: 8080

## Configure extra options for Frank!Framework containers' readiness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param readinessProbe.periodSeconds Period seconds for readinessProbe
## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param readinessProbe.successThreshold Success threshold for readinessProbe
## @param readinessProbe.httpGet.path Path for readinessProbe
## @param readinessProbe.httpGet.port Port for readinessProbe
##
readinessProbe:
  initialDelaySeconds: 0
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1
  httpGet:
    path: /iaf/api/server/health
    port: 8080

## Frank!Framework container's resource requests and limits
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
## @param resources [object] Set the resources for the frank-console containers
## @param resources.limits [string, nullable] The resources limits for the frank-console containers
## @param resources.requests.memory [string, nullable] The requested memory for the frank-console containers
## @param resources.requests.cpu [string, nullable] The requested cpu for the frank-console containers
## e.g.:
## resources
##   limits:
##     cpu: 2000m
##     memory: 4200M
##   requests:
##     cpu: 2000m
##     memory: 4200M
##
resources: {}

## @skip autoscaling
##
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

## @param terminationGracePeriodSeconds Number of seconds after which pods are forcefully killed
## @extra terminationGracePeriodSeconds Note: Lower values may cause running adapters to fail
terminationGracePeriodSeconds: 60

## @param nodeSelector Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## @param tolerations Set tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## @param affinity Set affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## NOTE: podAffinityPreset, podAntiAffinityPreset, and nodeAffinityPreset will be ignored when it's set
##
affinity: {}

## @param timeZone used for database connection and log timestamps
##
timeZone: Etc/UTC

## @section Traffic Exposure Parameters
##

## Frank!Framework service parameters
##
service:
  ## @param service.type Frank!Framework service type
  ##
  type: ClusterIP
  ## @param service.port Frank!Framework service port
  port: 80
  ## @param service.annotations Additional annotations for the Frank!Framework service
  ##
  annotations: {}

## Configure the ingress resource that allows you to access the Frank!Framework installation
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  ## @param ingress.enabled Enable ingress record generation for Frank!
  ##
  enabled: false
  ## @param ingress.className IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
  ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  ##
  className: ""
  ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  ## For a full list of possible ingress annotations, please see
  ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  ## Use this parameter to set the required annotations for cert-manager, see
  ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
  ## e.g:
  ## annotations:
  ##   kubernetes.io/ingress.class: nginx
  ##   kubernetes.io/tls-acme: 'true'
  ##
  annotations: {}
  ## @param ingress.hosts [object] Set hosts for ingress
  ## @param ingress.hosts.host [string, nullable] Set hostname
  ## @param ingress.hosts.paths [array, nullable] Set multiple paths
  ## @param ingress.hosts.paths.path [string, nullable] Set path (context url)
  ## @param ingress.hosts.paths.pathType [string, nullable] Set type of path
  ##
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  ## @param ingress.tls [object] Define tls secrets for hosts
  ## e.g.
  ## tls:
  ##   - secretName: chart-example-tls
  ##     hosts:
  ##       - chart-example.local
  ##
  tls: []

## @section Other Parameters
##

## Frank!Framework Service Account
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  ## @param serviceAccount.create Enable creation of ServiceAccount for Frank!Framework pod
  ##
  create: true
  ## @param serviceAccount.annotations Additional custom annotations for the ServiceAccount
  ##
  annotations: {}
  ## @param serviceAccount.name The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the frankframework.fullname template
  ##
  name: ""

## @param podAnnotations Annotations for Frank!Framework pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## @param podLabels Extra labels for Frank!Framework pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}

## Configure Pods Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext [object] Set Frank!Framework pod's Security Context
##
podSecurityContext: {}

## Configure Container Security Context (only main container)
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param securityContext [object] Set Frank!Framework container's Security Context
## e.g.
## securityContext: {}
##  capabilities:
##    drop:
##      - ALL
##  readOnlyRootFilesystem: true
##  runAsNonRoot: true
##  runAsUser: 1000
##
securityContext: {}
